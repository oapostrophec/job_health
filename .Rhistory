2250 / 0.05
2250 / 0.20
2250 / 0.25
2250 / 0.10
mode = read.csv('~/Downloads/submission_times_from_mode.csv')
head(mode)
plot(mode$job_id, mode$log_duration_average)
plot(mode$job_id, mode$log_duration_average)
mode_for_plot = mode[mode$job_id > 400000,]
plot(mode_for_plot$job_id, mode_for_plot$log_duration_average)
plot(mode_for_plot$job_id, mode_for_plot$log_duration_average, type='l')
plot(mode_for_plot$job_id, mode_for_plot$log_duration_average)
points(mode_for_plot$log_duration_minimum, col="red")
points(mode_for_plot$job_id,mode_for_plot$log_duration_minimum, col="red")
points(mode_for_plot$job_id,mode_for_plot$log_duration_maximum, col="green")
10^(-2.711204)
10^( -0.9929598)
library('shiny')
runApp('~/github/shiny-apps/goldbusters/')
install.packages('XML')
library(XML)
install.pcakges9'rCharts'
install.pcakges('rCharts')
install.packages('rCharts')
sessionInfo()
require(devtools)
install_github('rCharts', 'ramnathv')
library(XML)
runApp('~/github/shiny-apps/goldbusters/')
library('shiny')
runApp('~/github/shiny-apps/goldbusters/')
install.pakcages('memisc')
install.packages('memisc')
install.packages('Rook')
install.packages('XML')
library('shiny')
runApp('~/github/shiny-apps/goldbusters/')
sessionInfo()
1.2+0.2
5*1.5
4/5
5/6
4/6
7*5
39
45-38
cost = read.csv('~/Downloads/cost_estimate_data_617units.csv')
names9cost
names(cost)
hist(cost$avg_completion_secs)
hist(cost$avg_completion_secs, breaks=20)
hist(cost$avg_completion_secs[avg_completion_secs<5000], breaks=20)
hist(cost$avg_completion_secs[cost$avg_completion_secs<5000], breaks=20)
hist(cost$avg_completion_secs[cost$avg_completion_secs<5000]/60, breaks=20)
hist(cost$avg_completion_secs[cost$avg_completion_secs<5000]/60, breaks=20, xlab="Average comletion, minutes")
hist(cost$avg_completion_unit[cost$avg_completion_unit<5000]/60, breaks=20, xlab="Average comletion, minutes")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Average comletion, minutes")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes", main="Average time spent on 1 unit")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes", main="Average time spent on 1 unit", ylab="# job ids")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes", main="Average time spent on 1 unit", ylab="# job ids", color="blue")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes", main="Average time spent on 1 unit", ylab="# job ids", colour="blue")
hist(cost$avg_completion_unit[cost$avg_completion_unit<1000]/60, breaks=20, xlab="Completion time, minutes", main="Average time spent on 1 unit", ylab="# job ids", col="blue")
plot(x=cost$payment_cents[cost$avg_completion_unit<1000], y=cost$avg_completion_unit[cost$avg_completion_unit<1000]/60)
plot(y=cost$payment_cents[cost$avg_completion_unit<1000], x=cost$avg_completion_unit[cost$avg_completion_unit<1000]/60)
plot(y=cost$payment_cents[cost$payment_cents<50], x=cost$avg_completion_unit[cost$payment_cents<50]/60)
plot(y=cost$payment_cents[cost$payment_cents<50 & cost$avg_completion_unit < 15*60], x=cost$avg_completion_unit[cost$payment_cents<50  & cost$avg_completion_unit < 15*60]/60)
plot(y=cost$payment_cents[cost$payment_cents<50 & cost$avg_completion_unit < 15*60], x=cost$avg_completion_unit[cost$payment_cents<50  & cost$avg_completion_unit < 15*60]/60, xlab="Log-average completion time, minutes", ylab="Payment, cents")
plot(y=cost$payment_cents[cost$payment_cents<50 & cost$avg_completion_unit < 15*60]/cost$units_per_assignment[cost$payment_cents<50 & cost$avg_completion_unit < 15*60],
x=cost$avg_completion_unit[cost$payment_cents<50  & cost$avg_completion_unit < 15*60]/60, xlab="Log-average completion time, minutes",
ylab="Payment, cents")
plot(y=cost$payment_cents[cost$payment_cents<50 & cost$avg_completion_unit < 15*60]/cost$units_per_assignment[cost$payment_cents<50 & cost$avg_completion_unit < 15*60],
x=cost$avg_completion_unit[cost$payment_cents<50  & cost$avg_completion_unit < 15*60]/60, xlab="Log-average completion time, minutes",
ylab="Payment per unit, cents")
1.5*5
5*0.65
5*0.7
5*0.8
5*0.6
require(XML)
txt <- readLines('~/Downloads/the-templates_page.html')
pagetree <- htmlTreeParse(txt)
getNodeSet(pagetree[[1]][[2]][[15]], "//a", xmlValue)
require(XML)
txt <- readLines('~/Documents/the-templates_page.html')
pagetree <- htmlTreeParse(txt)
getNodeSet(pagetree[[1]][[2]][[15]], "//a", xmlValue)
require(XML)
txt <- readLines('~/Documents/the_templates_page.html')
pagetree <- htmlTreeParse(txt)
getNodeSet(pagetree[[1]][[2]][[15]], "//a", xmlValue)
summary(pagetree)
pagetree
getNodeSet(pagetree, "//job-templates-list", xmlValue)
pagetree <- htmlTreeParse(txt)
getNodeSet(pagetree, "//job-templates-list", xmlValue)
pagetree <- xmlTreeParse(txt)
getNodeSet(pagetree, "//job-templates-list", xmlValue)
pagetree <- xmlTreeParse(txt, useInternalNodes = T,
fullNamespaceInfo=F, isHTML=T)
getNodeSet(pagetree, "//job-templates-list", xmlValue)
getNodeSet(pagetree, "//job-templates-list")
getNodeSet(pagetree, "///dummy:job-templates-list")
getNodeSet(pagetree, "///dummy:job-templates-list", c(dummy = "http://www.omegahat.org"))
getNodeSet(pagetree, "//ul")
all_templates = getNodeSet(pagetree, "//ul")[[3]]
all_templates
getNodeSet(all_templates, "'//li")
getNodeSet(all_templates, "//li")
getNodeSet(all_templates, "//template-thumbnail-wrapper")
getNodeSet(all_templates, "//d:template-thumbnail-wrapper", "d")
getNodeSet(all_templates, "//all_templates:template-thumbnail-wrapper", "all_templates")
getNodeSet(all_templates, "//..//template-thumbnail-wrapper")
getNodeSet(all_templates)
getNodeSet(all_templates, "'ul")
getNodeSet(all_templates, "//ul")
getNodeSet(all_templates, "//div")
all_divs
all_divs = getNodeSet(all_templates, "//div")
template_divs = grepl(all_divs, pattern="template-thumbnail-wrapper")
template_divs
template_divs = grepl(unlost(all_divs), pattern="template-thumbnail-wrapper")
template_divs = grepl(unlist(all_divs), pattern="template-thumbnail-wrapper")
template_divs
template_divs = grepl(unlist(all_divs), pattern="wrapper")
template_divs
unlist(all_divs)
template_divs = lapply(all_divs,grepl(x, pattern="wrapper"))
template_divs = lapply(all_divs,function(x) = grepl(x, pattern="wrapper"))
template_divs = lapply(all_divs, function(x) { grepl(x, pattern="wrapper") })
unlist(all_divs)[1]
all_divs[[1]]
all_divs = getNodeSet(all_templates, "//div")
all_divs[[3]]
all_divs[[4]]
all_divs[[5]]
template_divs = lapply(all_divs[[5]], function(x) { grepl(x, pattern="wrapper") })
all_divs[[5]]
right_divs = getNodeSet(all_divs[[5]], "//div")
right_divs
right_divs[[135]]
right_divs[[125]]
template_divs = lapply(right_divs, function(x) { grepl(x, pattern="wrapper") })
right_divs = getNodeSet(all_divs[[5]], "//div")
right_divs
right_divs[[134]]
x = right_divs[[134]]
grepl(x, pattern="wrapper")
library('stringr')
grepl(x, pattern="wrapper")
??grepl
?grepl
grepl("abcd", pattern="abc")
x
class9x
class(x)
as.character(x)
as(x, "character")
template_divs = lapply(right_divs, function(x) { grepl(as(x, "character"), pattern="wrapper") })
template_divs
sum(unlist(template_divs))
templates = unlist(right_divs)[unlist(template_divs)]
templates
right_divs
templates = unlist(right_divs)[unlist(template_divs)]
templates[1]
templates[2]
templates[3]
unlist(template_divs)
length(unlist(right_divs))
templates = unlist(right_divs)[unlist(template_divs)]
length(templates)
templates[1]
templates[2]
templates[3]
templates[4]
templates[5]
templates[5][[1]]
template_divs = lapply(right_divs, function(x) { grepl(as(x, "character"),
pattern="<div class=\"template-thumbnail-wrapper\">") })
templates = unlist(right_divs)[unlist(template_divs)]
length(templates)
60/7
1/5
5*0.6
5*1.8
library('ggplot2')
templaes = read.csv('~/Downloads/templates_usage_by_month.csv')
templates = read.csv('~/Downloads/templates_usage_by_month.csv')
head(templates)
only_templates=templates[templates$template_name != "",]
ggplot(only_templates, aes(template_name, jobs_created,
color=factor(run_rate)))
+ geom_jitter()
ggplot(only_templates, aes(template_name, jobs_created,
color=factor(run_rate)))
ggplot(only_templates, aes(template_name, jobs_created,
color=factor(run_rate))) + geom_jitter()
color=factor(run_rate))) + geom_bar()
ggplot(only_templates, aes(template_name, jobs_created,
color=factor(run_rate))) + geom_bar()
ggplot(only_templates, aes(template_name, jobs_created,
color=run_rate)) + geom_bar()
ggplot(only_templates, aes(template_name, jobs_created,
color=run_rate*100)) + geom_bar()
ggplot(only_templates[month==3,], aes(template_name, jobs_created,
color=run_rate*100)) + geom_bar()
ggplot(only_templates[only_templates$month==3,], aes(template_name, jobs_created,
color=run_rate*100)) + geom_bar()
ggplot(only_templates[only_templates$month==3,],
aes(template_name,
jobs_created,
color=run_rate*100)) + geom_bar(position="dodge")
ggplot(only_templates[only_templates$month==3,],
aes(template_name,
jobs_created,
color=run_rate*100)) +
geom_bar(position="dodge",stat='identity')
ggplot(only_templates[only_templates$month==3,],
aes(template_name,
jobs_created,
fill=run_rate*100)) +
geom_bar(position="dodge",stat='identity')
ggplot(only_templates[only_templates$month==3,],
aes(jobs_created,
run_rate*100
fill=run_rate*100)) +
geom_jitter()
ggplot(only_templates[only_templates$month==3,],
aes(jobs_created,
run_rate*100)) +
geom_jitter()
only_templates$ran = only_templates$run_rate * only_templates$jobs_created
aggregate(only_templates$ran ~ only_templates$month)
cast(only_templates, title ~ month)
library('reshape')
library('reshape2')
library('reshape')
cast(only_templates, title ~ month)
reshape(only_templates, title ~ month)
reshape(only_templates, title ~ month, direction='wide')
?reshape
reshape(only_templates, idvar="title", timevar= "month", direction='wide')
names(only_templates)
reshape(only_templates, idvar="template_name", timevar= "month", direction='wide')
template_run_rates = reshape(only_templates, idvar="template_name", timevar= "month", direction='wide')
for_plot = template_run_rates[,c("template_name","run_rate.3","run_rate.4","run_rate.5")]
barplo(for_plot[,-1])
barplot(for_plot[,-1])
barplot(as.matrix(for_plot[,-1]))
barplot(t(as.matrix(for_plot[,-1])))
barplot(t(as.matrix(for_plot[,-1])), names.arg=(for_plot[,1])
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1])
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=4)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=1)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=3)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T)
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T, col=c("darkreen", "green", "lightgreen"))
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T, col=c("darkgreen", "green", "lightgreen"))
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T, col=c("darkgreen", "green", "white"))
for_plot = for_plot[order(for_plot$run_rate.3),]
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T, col=c("darkgreen", "green", "white"))
for_plot = for_plot[order(-for_plot$run_rate.3),]
barplot(t(as.matrix(for_plot[,-1])), names.arg=for_plot[,1], las=2, beside=T, col=c("darkgreen", "green", "white"))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("darkgreen", "teal", "white"))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(1,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(10,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(15,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(20,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(25,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(24,1,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
for_plot[,1]
for_plot = template_run_rates[,c("template_name","run_rate.3","run_rate.4","run_rate.5")]
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1] = gsub(for_plot[,1],
"Determine if Two Businesses are the Same Business (advanced)",
"Determine if Two Businesses\n are the Same Business (advanced)")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1] = gsub(for_plot[,1],
pattern="Determine if Two Businesses are the Same Business (advanced)",
replacement="Determine if Two Businesses\n are the Same Business (advanced)")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
for_plot[,1]
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1] = gsub(for_plot[,1],
pattern="Determine if Two Businesses are the Same Business (advanced)",
replacement="Are Two Businesses the Same Business (advanced)")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
template_run_rates = reshape(only_templates, idvar="template_name", timevar= "month", direction='wide')
for_plot = template_run_rates[,c("template_name","run_rate.3","run_rate.4","run_rate.5")]
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1] = gsub(for_plot[,1],
pattern="Determine if Two Businesses are the Same Business (advanced)",
replacement="Are Two Businesses the Same Business (advanced)")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
for_plot[,1]
for_plot[,1] = gsub(for_plot[,1],
pattern="Determine if Two Businesses are the Same Business (advanced)",
replacement="Are Two Businesses the Same Business (advanced)")
for_plot[,1]
template_run_rates = reshape(only_templates, idvar="template_name", timevar= "month", direction='wide')
for_plot = template_run_rates[,c("template_name","run_rate.3","run_rate.4","run_rate.5")]
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1][10] = "Are Two Businesses the Same Business (advanced)"
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
template_run_rates = reshape(only_templates, idvar="template_name", timevar= "month", direction='wide')
for_plot = template_run_rates[,c("template_name","run_rate.3","run_rate.4","run_rate.5")]
for_plot = for_plot[order(-for_plot$run_rate.3),]
for_plot[,1][10] = "Are Two Businesses the Same Business (advanced)"
par(mar=c(24,5,1,1))
par(bg=NA)
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
jpeg(filename = "even more templates.jpeg", width = 780, height = 780,
bg = "transparent")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
dev.off()
png(filename = "even more templates.jpeg", width = 780, height = 780,
bg = "transparent")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
dev.off()
png(filename = "even more templates.png", width = 780, height = 780,
bg = "transparent")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
dev.off()
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
jpeg(filename = "Rplot%03d.jpeg", width = 480, height = 480,
pointsize = 12, quality = 75, bg = "white", res = NA, ...)
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
legend(labels=c("March", "April", "May"), fill=c("red", "orange", "white"))
legend(text=c("March", "April", "May"), fill=c("red", "orange", "white"))
legend(legend=c("March", "April", "May"), fill=c("red", "orange", "white"))
legend("topright",legend=c("March", "April", "May"), fill=c("red", "orange", "white"))
legend("topright",legend=c("March", "April", "May"), fill=c("red", "orange", "white"),
horiz=T)
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "white"))
plot.new()
legend("topright",legend=c("March", "April", "May"), fill=c("red", "orange", "white"),
horiz=T)
write.csv(for_plot)
(0.77+0.61)/2
plot.new()
legend("topright",legend=c("March", "April", "May"), fill=c("red", "orange", "yellow"),
horiz=T)
plot.new()
legend("topright",legend=c("March", "April", "May"), fill=c("red", "orange", "yellow"),
horiz=T)
png(filename = "even more templates.png", width = 780, height = 780,
bg = "transparent")
par(mar=c(24,5,1,1))
barplot(t(as.matrix(for_plot[,-1])),
names.arg=for_plot[,1],
las=2, beside=T, col=c("red", "orange", "yellow"))
dev.off()
27/2
60*/0.066
60*0.066
con_times = read.csv('~/Downloads/time_to_conversion_new_users.csv')
head(con_times)
hist(con_times$create_to_convert)
hist(con_times$create_to_convert[con_times$from_template =="no"], main="No template")
hist(con_times$create_to_convert[con_times$from_template =="no"], plot=F)
hist(con_times$create_to_convert[con_times$from_template =="no"], plot=F, breaks=20)
hist(con_times$create_to_convert[con_times$from_template =="no"], plot=T, breaks=20)
hist(con_times$create_to_convert[con_times$from_template =="no"], plot=T, breaks=40)
hist(con_times$create_to_convert[con_times$from_template =="no"], plot=T, breaks=60)
the_nos = con_times[con_times$from_template =="no",]
the_nos = con_times[con_times$from_template =="no",]
hist(the_nos$create_to_convert, plot=F, breaks=20)
hist(the_nos$create_to_convert, plot=T, breaks=60)
hist(the_nos$create_to_convert[the_nos$create_to_convert<50], plot=T, breaks=60)
hist(the_nos$create_to_convert[the_nos$create_to_convert<20], plot=T, breaks=60)
hist(the_nos$create_to_convert[the_nos$create_to_convert<5], plot=T, breaks=60)
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=60)
the_yess = con_times[con_times$from_template =="yes",]
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=60)
hist(the_nos$create_to_convert[the_nos$create_to_convert<5], plot=T, breaks=60)
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=60)
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=c(0.5,1,2,5,10))
hist(the_yess$create_to_convert, plot=T, breaks=c(0.5,1,2,5,10))
hist(the_yess$create_to_convert, plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert, plot=T, breaks=c(0,0.5,1,2,5,10,500))
hist(the_yess$create_to_convert, plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=60)
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<5], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_yess$create_to_convert[the_yess$create_to_convert<10], plot=T, breaks=c(0,0.5,1,2,5,10))
hist(the_nos$create_to_convert[the_nos$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_yess$create_to_convert[the_yess$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_yess$create_to_convert[the_yess$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_yess$create_to_convert[the_yess$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_nos$create_to_convert[the_nos$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_yess$create_to_convert[the_yess$create_to_convert<100], plot=T, breaks=c(0,0.5,1,2,5,10,100))
hist(the_nos$create_to_convert[the_nos$create_to_convert<100], plot=F, breaks=c(0,0.5,1,2,5,10,100))
max(con_times$create_to_convert)
hist(the_nos$create_to_convert, plot=F, breaks=c(0,0.5,1,2,5,10,100,300))
hist_yes = hist(the_yess$create_to_convert, plot=F, breaks=c(0,0.5,1,2,5,10,100,300))
hist_no = hist(the_nos$create_to_convert, plot=F, breaks=c(0,0.5,1,2,5,10,100,300))
breaks = hist_yes$breaks[-1]
density_yes = hist_yes$counts
density_no = hist_no$counts
density_table = cbind(less_then=breaks, template= density_yes, np_template=density_no)
barplot(density_table)
barplot(density_table[,-1])
barplot(t(density_table[,-1]))
barplot(t(density_table[,-1]), beside=T)
write.csv(density_table)
write.csv(density_table, row.names=F)
table(con_times$from_template)
table(con_times$from_template)/nrow(con_times)
library('shiny')
runApp('~/github/job_health/')
System.date()
system.date()
sys.date()
now()
system.time()
format(Sys.time(), "%a %b %d %X %Y")
format(Sys.time(), "%b_%d_%X_%Y")
system.time()
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
1912 + 2518
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
runApp('~/github/job_health/')
